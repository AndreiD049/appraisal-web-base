server {
        listen 80;
        listen [::]:80;
        server_name admintools.online www.admintools.online;

        location ~ /.well-known/acme-challenge {
          allow all;
          root /var/www/html;
        }

        location / {
                rewrite ^ https://www.$host$request_uri? permanent;
        }

	add_header Content-Security-Policy "default-src 'self'; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; font-src 'self' https://fonts.gstatic.com https://fonts.googleapis.com;";

}

# Add caching for authentication requests
proxy_cache_path /data levels=1:2 keys_zone=auth_cache:10m max_size=1g inactive=10m use_temp_path=off;

# Because connect.sid contains a dot, we cannot access it directly via the $cookie_* variable
# Map it to another variable 
map $http_cookie $connect_sid_cookie {
		default "";
		"~connect\.sid=(?<connect_sid>[^;]+)" $connect_sid;
}

server {
	listen 443 ssl http2;
	listen [::]:443 ssl http2;
	server_name admintools.online www.admintools.online;

	server_tokens off;

	ssl_certificate /etc/letsencrypt/live/admintools.online/fullchain.pem;
	ssl_certificate_key /etc/letsencrypt/live/admintools.online/privkey.pem;

	ssl_buffer_size 8k;

	ssl_dhparam /etc/ssl/certs/dhparam-2048.pem;

	ssl_protocols TLSv1.2;
	ssl_prefer_server_ciphers on;

	ssl_ciphers ECDH+AESGCM:ECDH+AES256:ECDH+AES128:DH+3DES:!ADH:!AECDH:!MD5;

	ssl_ecdh_curve secp384r1;
	ssl_session_tickets off;

	ssl_stapling on;
	ssl_stapling_verify on;
	resolver 8.8.8.8;

	# reduces the data that needs to be sent over the network
	gzip on;
	gzip_vary on;
	gzip_proxied any;
	gzip_comp_level 2;
	gzip_buffers 16 8k;
	gzip_http_version 1.1;
	gzip_min_length 256;
	gzip_types text/plain text/css application/javascript application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;

	location / {
		try_files $uri $uri/ /index.html;
	}

	location /api {
		auth_request /auth/validate;
		auth_request_set $user $upstream_http_user;
		proxy_set_header User $user;
		proxy_pass http://web_back:3001;
	}

	location /stream {
		auth_request /auth/validate;
		auth_request_set $user $upstream_http_user;
		proxy_set_header User $user;
		proxy_pass http://connect:3004;
	}

	location /auth {
<<<<<<< HEAD
		location /auth {
			proxy_pass http://auth:3003;
		}

		location = /auth/validate {
			internal;
			proxy_cache auth_cache;
			proxy_cache_key $connect_sid_cookie;
			proxy_cache_valid any 10m;
			proxy_cache_methods GET HEAD;
			proxy_pass http://auth:3003;
			proxy_pass_request_body off;
			proxy_set_header Content-Length "";
			proxy_set_header X-Original-URI $request_uri;
		}
=======
			location /auth {
					proxy_pass http://auth:3003;
			}

			location = /auth/validate {
					internal;
					proxy_cache auth_cache;
					proxy_cache_key $connect_sid_cookie;
					proxy_cache_valid 200 10m;
					proxy_cache_methods GET HEAD;
					proxy_pass http://auth:3003;
					proxy_pass_request_body off;
					proxy_set_header Content-Length "";
					proxy_set_header X-Original-URI $request_uri;
			}
>>>>>>> e8f8dfe28ea8fb5246e25e9af152ff2d9190a857
	}

	root /usr/share/nginx/html;
	index index.html index.htm index.nginx-debian.html;

	# config to don't allow the browser to render the page inside an frame or iframe
	# and avoid clickjacking http://en.wikipedia.org/wiki/Clickjacking
	# if you need to allow [i]frames, you can use SAMEORIGIN or even set an uri with ALLOW-FROM uri
	# https://developer.mozilla.org/en-US/docs/HTTP/X-Frame-Options
	add_header X-Frame-Options SAMEORIGIN;

	# when serving user-supplied content, include a X-Content-Type-Options: nosniff header along with the Content-Type: header,
	# to disable content-type sniffing on some browsers.
	# https://www.owasp.org/index.php/List_of_useful_HTTP_headers
	# currently suppoorted in IE > 8 http://blogs.msdn.com/b/ie/archive/2008/09/02/ie8-security-part-vi-beta-2-update.aspx
	# http://msdn.microsoft.com/en-us/library/ie/gg622941(v=vs.85).aspx
	# 'soon' on Firefox https://bugzilla.mozilla.org/show_bug.cgi?id=471020
	add_header X-Content-Type-Options nosniff;

	# This header enables the Cross-site scripting (XSS) filter built into most recent web browsers.
	# It's usually enabled by default anyway, so the role of this header is to re-enable the filter for 
	# this particular website if it was disabled by the user.
	# https://www.owasp.org/index.php/List_of_useful_HTTP_headers
	add_header X-XSS-Protection "1; mode=block";

	# with Content Security Policy (CSP) enabled(and a browser that supports it(http://caniuse.com/#feat=contentsecuritypolicy),
	# you can tell the browser that it can only download content from the domains you explicitly allow
	# http://www.html5rocks.com/en/tutorials/security/content-security-policy/
	# https://www.owasp.org/index.php/Content_Security_Policy
	# I need to change our application code so we can increase security by disabling 'unsafe-inline' 'unsafe-eval'
	# directives for css and js(if you have inline css or js, you will need to keep it too).
	# more: http://www.html5rocks.com/en/tutorials/security/content-security-policy/#inline-code-considered-harmful
	add_header Content-Security-Policy "default-src 'self'; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; font-src 'self' https://fonts.gstatic.com https://fonts.googleapis.com; img-src 'self' data:";

	# access_log off;
	# to boost I/O on HDD we can disable access logs
	# # this prevent nginx from logging every action in a log file named `access.log`.

	# config to enable HSTS(HTTP Strict Transport Security) https://developer.mozilla.org/en-US/docs/Security/HTTP_Strict_Transport_Security
	# to avoid ssl stripping https://en.wikipedia.org/wiki/SSL_stripping#SSL_stripping
	# also https://hstspreload.org/
	add_header Strict-Transport-Security "max-age=31536000; includeSubdomains; preload";

}
